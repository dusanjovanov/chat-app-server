{"version":3,"sources":["models/user.ts","routes/login.ts","routes/logout.ts","routes/verifyToken.ts","models/message.ts","socket/fetchMessages.ts","socket/init.ts","socket/sendMessage.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"..\\src","sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  email: String,\r\n  password: String,\r\n  displayName: String,\r\n  avatar: String,\r\n  colors: {\r\n    bg: String,\r\n    front: String\r\n  }\r\n});\r\n\r\nuserSchema.virtual(\"id\").get(function() {\r\n  return this._id;\r\n});\r\n\r\nuserSchema.set(\"toJSON\", {\r\n  virtuals: true,\r\n  versionKey: false,\r\n  transform: (doc, ret) => {\r\n    delete ret._id;\r\n    delete ret.password;\r\n    return ret;\r\n  }\r\n});\r\n\r\nconst User = mongoose.model(\"User\", userSchema);\r\n\r\nexport default User;\r\n","import bcrypt from \"bcrypt\";\r\nimport User from \"../models/user\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { Request, Response } from \"express\";\r\n\r\nconst login = async (req: Request, res: Response) => {\r\n  if (!req.body.email || !req.body.password) return res.sendStatus(400);\r\n\r\n  try {\r\n    const user = await User.findOne({\r\n      email: req.body.email\r\n    }).exec();\r\n\r\n    if (user) {\r\n      //check password\r\n      const isPasswordMatch = await bcrypt.compare(\r\n        req.body.password,\r\n        user.password\r\n      );\r\n\r\n      if (isPasswordMatch) {\r\n        const token = jwt.sign(\r\n          { email: req.body.email, password: req.body.password },\r\n          process.env.SECRET_KEY\r\n        );\r\n\r\n        res\r\n          .cookie(\"jwt\", token, { httpOnly: true })\r\n          .status(200)\r\n          .json(user);\r\n      } else {\r\n        res.sendStatus(401);\r\n      }\r\n    } else {\r\n      res.sendStatus(404);\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.sendStatus(500);\r\n  }\r\n};\r\n\r\nexport default login;\r\n","import { Request, Response } from \"express\";\r\n\r\nconst logout = (req: Request, res: Response) => {\r\n  res.clearCookie(\"jwt\").sendStatus(200);\r\n};\r\n\r\nexport default logout;\r\n","import bcrypt from \"bcrypt\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { Request, Response } from \"express\";\r\nimport User from \"../models/user\";\r\n\r\nconst verifyToken = async (req: Request, res: Response) => {\r\n  const token = req.cookies[\"jwt\"];\r\n\r\n  try {\r\n    const { email, password } = jwt.verify(token, process.env.SECRET_KEY);\r\n\r\n    const user = await User.findOne({ email }).exec();\r\n\r\n    if (user) {\r\n      // check password\r\n      const isPasswordMatch = await bcrypt.compare(password, user.password);\r\n\r\n      if (isPasswordMatch) {\r\n        res.json(user);\r\n      } else {\r\n        res.sendStatus(401);\r\n      }\r\n    } else {\r\n      res.sendStatus(404);\r\n    }\r\n  } catch (err) {\r\n    // invalid token\r\n    res.sendStatus(401);\r\n  }\r\n};\r\n\r\nexport default verifyToken;\r\n","import mongoose from \"mongoose\";\r\n\r\nconst messageSchema = new mongoose.Schema({\r\n  text: String,\r\n  user: { type: mongoose.Schema.Types.ObjectId, ref: \"User\" },\r\n  sentAt: Date\r\n});\r\n\r\nmessageSchema.virtual(\"id\").get(function() {\r\n  return this._id;\r\n});\r\n\r\nmessageSchema.set(\"toJSON\", {\r\n  virtuals: true,\r\n  versionKey: false,\r\n  transform: (doc, ret) => {\r\n    delete ret._id;\r\n    return ret;\r\n  }\r\n});\r\n\r\nconst Message = mongoose.model(\"Message\", messageSchema);\r\n\r\nexport default Message;\r\n","import moment from \"moment\";\r\nimport Message from \"../models/message\";\r\n\r\nconst fetchMessages = async (m, socket) => {\r\n  const lastDate = m.payload;\r\n\r\n  const cursor = await Message.where(\"sentAt\")\r\n    .lt(\r\n      moment(lastDate)\r\n        .utc()\r\n        .toDate()\r\n    )\r\n    .sort(\"-sentAt\")\r\n    .populate(\"user\")\r\n    .cursor();\r\n\r\n  const messages = [];\r\n\r\n  let message;\r\n  while ((message = await cursor.next()) !== null) {\r\n    const currentMessageTime = moment(message.sentAt).utc();\r\n    const lastPushedMessage = messages[messages.length - 1];\r\n    const lastPushedTime =\r\n      lastPushedMessage && moment(lastPushedMessage.sentAt).utc();\r\n\r\n    // older time block\r\n    if (lastPushedTime && currentMessageTime.isBefore(lastPushedTime, \"day\")) {\r\n      break;\r\n    }\r\n    // current time block\r\n    else {\r\n      messages.push(message);\r\n    }\r\n  }\r\n\r\n  const payload =\r\n    messages.length === 0 ? { isEnd: true } : { messages: messages.reverse() };\r\n\r\n  socket.send({ type: \"FETCH_MESSAGES\", payload });\r\n};\r\n\r\nexport default fetchMessages;\r\n","import moment from \"moment\";\r\nimport Message from \"../models/message\";\r\n\r\nconst init = async socket => {\r\n  const cursor = await Message.find({})\r\n    .sort(\"-sentAt\")\r\n    .populate(\"user\")\r\n    .cursor();\r\n\r\n  const messages = [];\r\n\r\n  let message;\r\n  let lastMessage;\r\n  while ((message = await cursor.next()) !== null) {\r\n    if (\r\n      lastMessage &&\r\n      moment(message.sentAt)\r\n        .utc()\r\n        .isBefore(moment(lastMessage.sentAt).utc(), \"day\")\r\n    ) {\r\n      break;\r\n    } else {\r\n      messages.push(message);\r\n      lastMessage = message;\r\n    }\r\n  }\r\n\r\n  const payload =\r\n    messages.length === 0 ? { isEnd: true } : { messages: messages.reverse() };\r\n\r\n  socket.emit(\"init\", payload);\r\n};\r\n\r\nexport default init;\r\n","import Message from \"../models/message\";\r\n\r\nconst sendMessage = async (message, socket) => {\r\n  const { text, userId } = message.payload;\r\n\r\n  const newMessage = await Message.create({\r\n    text,\r\n    user: userId,\r\n    sentAt: new Date()\r\n  });\r\n\r\n  const newMessagePopulated = await newMessage.populate(\"user\").execPopulate();\r\n\r\n  socket.send({ type: \"NEW_MESSAGE\", payload: newMessagePopulated });\r\n};\r\n\r\nexport default sendMessage;\r\n","import bodyParser from \"body-parser\";\r\nimport cookieParser from \"cookie-parser\";\r\nimport cors from \"cors\";\r\nimport dotenv from \"dotenv\";\r\nimport express from \"express\";\r\nimport { createServer } from \"http\";\r\nimport mongoose from \"mongoose\";\r\nimport socketio from \"socket.io\";\r\nimport login from \"./routes/login\";\r\nimport logout from \"./routes/logout\";\r\nimport verifyToken from \"./routes/verifyToken\";\r\nimport fetchMessages from \"./socket/fetchMessages\";\r\nimport init from \"./socket/init\";\r\nimport sendMessage from \"./socket/sendMessage\";\r\n\r\ndotenv.config();\r\n\r\nconst PORT = process.env.port || 5000;\r\n\r\nlet dbUrl;\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  dbUrl = \"mongodb://localhost/chat\";\r\n} else {\r\n  dbUrl = `mongodb://${process.env.DB_USER}:${process.env.DB_PASSWORD}@${process.env.DB_URL}`;\r\n}\r\n\r\nconsole.log(dbUrl)\r\n\r\ntry {\r\n  mongoose.connect(dbUrl, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n  });\r\n} catch (err) {\r\n  console.log(err);\r\n}\r\n\r\nconst app = express();\r\nconst server = createServer(app);\r\nconst io = socketio(server, { origins: \"http://localhost:1234\" });\r\n\r\napp.use(cors({ origin: \"http://localhost:1234\", credentials: true }));\r\napp.use(bodyParser.json());\r\napp.use(cookieParser());\r\n\r\napp.post(\"/login\", login);\r\napp.get(\"/logout\", logout);\r\napp.get(\"/verifyToken\", verifyToken);\r\n\r\nio.on(\"connection\", async socket => {\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    console.log(`New socket connected: ${socket.id}`);\r\n  }\r\n\r\n  init(socket);\r\n\r\n  socket.on(\"message\", async message => {\r\n    switch (message.type) {\r\n      case \"SEND_MESSAGE\": {\r\n        sendMessage(message, socket);\r\n        break;\r\n      }\r\n      case \"FETCH_MESSAGES\": {\r\n        fetchMessages(message, socket);\r\n        break;\r\n      }\r\n    }\r\n  });\r\n\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    socket.on(\"disconnect\", () =>\r\n      console.log(`Socket disconnected: ${socket.id}`)\r\n    );\r\n  }\r\n});\r\n\r\nserver.listen(PORT, () => console.log(`Server started on port ${PORT}`));\r\n"]}